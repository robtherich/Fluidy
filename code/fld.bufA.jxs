<jittershader name="stripes">
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="texcoord" type="vec2" state="TEXCOORD" />
    <param name="iResolution" type="vec2" state="TEXDIM0" />
    <param name="iMouse" type="vec4" default="0 0 0 0" />
    <param name="iTime" type="float" default="0" />
    <param name="iFrame" type="int" default="0" />
	<param name="iChannel0" type="int" default="0" />
	<param name="iChannel1" type="int" default="1" />
	<param name="iChannel2" type="int" default="2" />

    <param name="iters" type="int" default="10" />
    <param name="speed" type="float" default="1." />
    <param name="pump" type="float" default="5." />

    <language name="glsl" version="1.5">
    	<include source="mb.common.glsl" program="fp" />
        <bind param="modelViewProjectionMatrix" program="vp" />
        <bind param="textureMatrix0" program="vp" />
        <bind param="position" program="vp" />
        <bind param="texcoord" program="vp" />
        <bind param="iTime" program="fp" />
        <bind param="iFrame" program="fp" />
        <bind param="iMouse" program="fp" />
        <bind param="iResolution" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />
		<bind param="iChannel2" program="fp" />

        <bind param="iters" program="fp" />
        <bind param="speed" program="fp" />
        <bind param="pump" program="fp" />

		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>      
        <program name="fp" type="fragment"  >
        <![CDATA[
            #version 330 core
            
            in jit_PerVertex {
                vec2 texcoord;
            } jit_in;
            out vec4 outColor;

            uniform float iTime;
            uniform int iFrame;
            uniform vec2 iResolution;
            uniform vec4 iMouse;

			// modify uniform samplers as necessary
			uniform sampler2D iChannel0;
			uniform sampler2D iChannel1;

            uniform int iters;
            uniform float speed;
            uniform float pump;
        

// <<<<<<<<< START SHADERTOY PASTE
/*
    Created by Cornus Ammonis (2019)
    Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
*/

/*
    For long-time Shadertoyers, you may notice that this bears a striking
    resemblance to Florian Berger's "Spilled" shader here: 
        https://www.shadertoy.com/view/MsGSRd

    I've used the same visualization code for the sake of comparison
    (and of course convenience).

    In the spite of the visual similarity, the CFD algorithm itself bears 
    nothing at all in common at first glance. Nonetheless, the resemblance
    is not a coincidence. This is not at all obvious without some fairly
    deep analysis, but Florian's shader and mine are actually both 
    approximations of the same distribution, which boils down to sums of
    second partial derivatives, which can be found here in the viscous stress 
    portion of the filtered Navier-Stokes equations:
    https://en.wikipedia.org/wiki/Large_eddy_simulation

    I may be wrong on this relation to Navier-Stokes, tell me if you
    know otherwise.

    At any rate, benchmarking this using Shadertoy Unofficial Plugin, here:
        https://github.com/patuwwy/ShaderToy-Chrome-Plugin
    it can run at about 2400fps at 800x450, which is the default resolution 
    for me without going in fullscreen, or about 1100fps at 1200x675 on a 980Ti
    (64x paint calls). Pretty good! It runs well at 4K widescreen, but I'm not 
    sure how to benchmark that in a browser.
*/

#define C(x,y) textureLod(iChannel0, t*(U+float(1<<s)*vec2(x,y)),float(s))
void mainImage( out vec4 O, in vec2 U )
{
    vec2 t = 1./iResolution.xy, q = U*t - .5;
    int s = iters;
    for (; s > 0; s--)
        O.xy -= 2.0 * vec2(C(0,1).x + C(0,-1).x, C(1,0).y + C(-1,0).y)
            -4.0 * C(0,0).xy + (C(1,-1) - C(1,1) - C(-1,-1) + C(-1,1)).yx;
    
    O *= speed;
    O = (C(O.x,O.y) + vec4((pump * 0.0001) * q / (dot(q,q)+.01),0,0));
    
    // this seems to be a good texture initialization method:
    if(iFrame < 1) {
        O = vec4(0);    
    } else if(iFrame < 2) {
        O = texture(iChannel1,U*t);
    }
}

/*
A golfed version just for fun. 295 chars. Probably hard/impossible to get it
to ~220 chars to fit it into one tweet because writing out the locations to 
read from takes a bunch of space. But who knows, you all are really clever.

#define C(x,y) texture(iChannel0, t*(U+pow(2.,s)*vec2(x,y)),s)
#define mainImage(c,f) vec2 t = 1./iResolution.xy,q=f*t-.5,U=f; float s=11.; for (; s > 0.; s-=1.) {c.xy -= 2.*vec2(C(0,1).x+C(0,-1).x,C(1,0).y+C(-1,0).y)-4.*C(0,0).xy+(C(1,-1)-C(1,1)-C(-1,-1)+C(-1,1)).yx;}c.xy = C(c.x,c.y).xy+ 1e-3*q / (dot(q,q)+.01)   
*/
// <<<<<<<<< END SHADERTOY PASTE

			void main(void) {                
				mainImage(outColor, jit_in.texcoord.st*iResolution);
			}
        ]]>
        </program>
    </language>
</jittershader>
